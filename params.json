{"body":"## Try out Viskit.js\r\n\r\nViskit.js is more than just a charting library. It solves the data filtering part as well for your visualizations. Viskit has inbuilt constructs such as data filters and providers so the chart creators can easily retrieve the required data from a data service.\r\n\r\nViskit is open sourced and available under [Apache2.0](http://www.apache.org/licenses/LICENSE-2.0.html) licence.\r\n\r\n## What's been used behind the scene \r\nViskit uses multiple charting libraries behind the scene and also provides an interface to plug your own charting toolkit. The libraries which are being used are\r\n* Raphael - http://g.raphaeljs.com/\r\n* Protovis - http://mbostock.github.com/protovis/\r\n* JQPlot - http://www.jqplot.com/\r\n* InfoVis - http://thejit.org/\r\n* Sencha Touch Charts - http://www.sencha.com/products/touch/charts\r\n\r\nWe also like to thank all the geniuses who contributed to these projects.\r\n\r\n## Some notable features\r\n* Inherent support for XML data sets\r\n* Concept of extensible DataProviders and DataFilters to plug new data sources and filter according to\r\n  custom requirements\r\n* Periodic data pull\r\n* Local and session storage to persist temporal data\r\n\r\n## Example charts\r\n\r\n* [Bar Chart](http://nuwanbando.com/Viskit/examples/bar_chart.html)\r\n* [Area Chart](http://nuwanbando.com/Viskit/examples/area_chart.html)\r\n* [Clustered Bar Chart](http://nuwanbando.com/Viskit/examples/clusteredbar_chart.html)\r\n* [Composite Chart](http://nuwanbando.com/Viskit/examples/composite_chart.html)\r\n* [Pie Chart](http://nuwanbando.com/Viskit/examples/composite_chart.html)\r\n* [Date Range](http://nuwanbando.com/Viskit/examples/date_range.html)\r\n* [Wedge Chart](http://nuwanbando.com/Viskit/examples/wedge_chart.html)\r\n* [Funnel Chart](http://nuwanbando.com/Viskit/examples/funnel_chart.html)\r\n* [Line Chart](http://nuwanbando.com/Viskit/examples/line_chart.html)\r\n* [Analytic](http://nuwanbando.com/Viskit/examples/analytics.html)\r\n* [Single Data Provider](http://nuwanbando.com/Viskit/examples/singleProvider.html)\r\n* [And more](http://www.nuwanbando.com/Viskit)\r\n\r\n## Working with charts - use-cases of Viskit\r\nViskit supports both jqPlot and Protovis and provides a common interface to the user hiding the complexities and the differences between various charting libraries. The following section explains step by step on how charts can be developed using Viskit via either JQPlot or Protovis.\r\n\r\n###Including required files\r\n\r\nViskit requires users to include a few scripts and CSS files into their html source. You need to have following scripts included \r\n\r\n```html\r\n<script type=\"text/javascript\" language=\"javascript\" src=\"/Viskit/js/Viskit.js\"></script>\r\n```   \r\n\r\n*jqPlot Note: To work with jqPlot the following two lines should also be added*\r\n\r\n```html\r\n<script type=\"text/javascript\" language=\"javascript\" src=\"/Viskit/js/jquery.jqplot.js\"></script>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/Viskit/css/jqplot/jquery.jqplot.css\" />\r\n```\r\n\r\n###Creating the chart \r\n\r\nCreating a chart is done by calling a constructor of the chart type required and passing the necessary values used by the chart.\r\n\r\n```javascript\r\nwso2vis.s.chart.jqplot.pluginsType(\"BarChart\");\r\nvar chart = document.getElementById('chart1')    \r\nvar barChart = new Viskit.s.chart.jqplot.BarChart(chart,\"Title\",\"\");    \r\n        \r\nbarChart.dataField([\"services\", \"service\"])    \r\n          .dataValue([\"stats\", \"requestCount\"])    \r\n          .dataLabel([\"@name\"])    \r\n          .width(600)    \r\n          .height(300)    \r\n          .showPointLabels(true)    \r\n          .barWidth(75)    \r\n          .barMargin(45)    \r\n          .yTitle(\"RequestCount\")    \r\n        \r\nbarChart.load();    \r\n        \r\ndataProvider.addDataReceiver(dataFilter);    \r\ndataFilter.addDataReceiver(barChart); \r\ndataProvider.pullData();   \r\ndataProvider.initialize();    \r\n```   \r\nIf you are using JQPlot, its mandetory to include the \"Barchart\" plugin, which is done in the line No. 1\r\nThe second line creates a DOM object from a div element with the id “chart1”. Then calls the jqplot.BarChart constructor passing the DOM object of the chart object, the title of the chart and description of the chart (in the example the description is left blank)\r\n\r\n*Note: The chart id can also be set instead of the DOM object. The following code snippet also works*\r\n\r\n```javascript\r\nvar barChart = new Viskit.s.chart.jqplot.BarChart(\"chart1\",\"Title\",\"\");\r\n```\r\n \r\n####Setting chart properties\r\n\r\nViskit provides the user the ability to change the chart properties in a simple manner. There is a set of properties that are common to all the charts irrespective of their type.\r\n\r\n_Ex.  dataField,  width_\r\n\r\nAnd there is another set of properties that are specific to each chart.\r\n\r\n_Ex. barWdith barMargin ( these are specific to jqPlot bar charts)._\r\n\r\ndataField, dataValue and dataLabel are the most important properties of the chart. Let us look at what they are used for.\r\n\r\n**dataField**\r\n\r\nSpecifies which data element to use from the data set. For the sample we use the following XML data set\r\n\r\n```xml\r\n<services>  \r\n   <service name=\"Service 03\">  \r\n         <stats>  \r\n           <requestCount>34</requestCount>  \r\n           <responseCount>18</responseCount>  \r\n           <faultCount>16</faultCount>  \r\n           <averageResponseTime>579</averageResponseTime>  \r\n           <maximumResponseTime>624</maximumResponseTime>  \r\n           <minimumResponseTime>383</minimumResponseTime>  \r\n         </stats>  \r\n   \r\n         <operations>  \r\n          …………….  \r\n         </operations>  \r\n   </service>          \r\n   \r\n   <service name=\"Service 04\">  \r\n         <stats>  \r\n           <requestCount>44</requestCount>  \r\n           <responseCount>18</responseCount>  \r\n           <faultCount>26</faultCount>  \r\n           <averageResponseTime>635</averageResponseTime>  \r\n           <maximumResponseTime>685</maximumResponseTime>  \r\n           <minimumResponseTime>631</minimumResponseTime>  \r\n         </stats>  \r\n   \r\n         <operations>  \r\n          …………………….  \r\n         </operations>  \r\n   </service>\r\n<services>          \r\n```\r\n\r\nservice field is taken from, the above dataset and provided to the chart as following\r\n\r\n```javascript\r\nbarChart.dataField([\"services\", \"service\"])  \r\n```\r\n\r\n**dataValue**\r\n \r\nSpecifies the actual value to be used to draw the chart from the specified in the dataField. \r\n\r\n```javascript\r\nbarChart.dataValue([\"stats\", \"requestCount\"])\r\n```\r\n\r\n**dataLabel**\r\n\r\nSpecifies the value to be used as the data label in barchart. In jqplot bar charts this is used to name the x-axis of the chart. \r\n\r\n```javascript\r\n barChart.dataLabel([\"@name\"])\r\n```\r\n \r\nAfter specifiying these three properties and the other optional properties all that needs to be done is to call the `load()` function and add the chart object to a data provider. In this example a data filter is used so the chart object will not be added directy to the data provider instead it will be added to the data filter.\r\n\r\n```javascript\r\n barChart.load();  \r\n dataProvider.addDataReceiver(dataFilter);  \r\n dataFilter.addDataReceiver(barChart);\r\n```\r\nThe “load” function will initialize the chart and set the necessary parameters to draw the chart.\r\n\r\n**onTooltip**\r\n\r\nAllows the user to specify and tooltip for the chart the function would be as follows\r\n\r\n```javascript\r\nbarChart.onTooltip = function barTooltip(data) {  \r\n      return data[\"@name\"] + \" - Requests: \"+ data[\"stats\"][\"requestCount\"];  \r\n}\r\n```         \r\n\r\n**onClick**\r\n\r\nAllows the user to specify a message to be displayed if an element is clicked\r\n\r\n```javascript\r\n barChart.onClick = function barClick(data) {  \r\n      alert(\"Clicked: \" + data[\"@name\"]);  \r\n }\r\n```  \r\n\r\n###Data providers\r\n\r\nProviders perform the task of provisioning data (Currently the basic providers are written to take XML like data sets). Viskit gives the user three variants of data providers ProviderGET, ProviderGETJSON, ProviderGETMakeRequest \r\n\r\n`ProviderGET()`\r\nTakes a data service URL that returns the data in a XML format.\r\n\r\n`ProviderGETJSON()`\r\nTakes data service URL that returns  the data in JSON format. \r\n\r\n`ProviderGETMakeRequest()`\r\nNormal AJAX requests cannot be made from within open social gadgets because of the cross domain restrains. This provider uses gadgets.io.makeRequest to retrieve data. This takes a data service URL that returns data in XML format \r\n  \r\n```javascript\r\nvar dataProvider = new Viskit.p.ProviderGET(\"http://localhost/Viskit/examples/generator2.php\"); \r\n``` \r\n\r\nThis line creates a data provider that receives data from the given URL. The next step is to add data receivers to the created data provider. Data providers keep an array of data receivers that it pushes data into when the data provider receives new data. New data receivers can be added to the list as follows. \r\n\r\n```javascript\r\ndataProvider.addDataReceiver(theReceiver);\r\n```  \r\n\r\n This will add “theReceiver” object into the data provider’s receiver list. “theReceiver” can be a data filter or a chart object. Then to actually make the data provider pull data from the data source the following line should be included in your code. This call will retrieve data from the data source and push them into all the data receivers registered to that data provider.\r\n\r\n```javascript\r\ndataProvider.initialize();  \r\ndataProvider.pullData();\r\n```\r\n  \r\n`dataProvider.initialize()` is called to run any initialization of some logic if needed. \r\n\r\n###Data filters\r\n\r\nData filters are used to filter out only the necessary data that is needed for the charts. Filters can be easily added to data providers to filter the data\r\n\r\n```javascript\r\nvar dataFilter = new Viskit.f.BasicFilter([\"services\", \"service\"], [\"@name\"],[\"Service 04\",”Service 03”]);\r\n```  \r\n\r\nThe above line declares a Basic filter which takes three parameters  dataField, dataLabel, filterArray\r\n\r\n**dataField** \r\nSpecifies which data element to use from the data set\r\n\r\n**dataLabel**\r\nThe label that will be used to filter the data\r\n\r\n**filterArray**\r\nThe values that the data label should be filtered against\r\n\r\n###Setting a Timer\r\n\r\nWhen working with data that change over time it is important to update after a specific time interval. Viskit provides a timing mechanism that can address this issue. You can set a timer to a time interval of your choice and set the data provider to pull new data from the data source when a tick is made in the timer. the timer can be used in any way the user wants it is not limited to data providers. Let’s look at the code that is related to timers.\r\n\r\n```javascript  \r\nvar timer = new Viskit.u.Timer(5000);  \r\ntimer.tick = dataProvider.pullData();  \r\ntimer.startTimer();\r\n```  \r\n\r\nThe above code snippet creates a timer that ticks every 5 seconds. In this code snippet the tick is set to call `dataProvider.pullData()`\r\n\r\n###Using local Storage\r\n\r\nOne of the features provided by Viskit is the local and session storage support. This feature is currently available in jpPlot charts. Local storage is important when charting the variation of a property against time. Local storage will allow you to keep the values of that property for longer periods of time even if the browser is closed or the device is shutdown. Uses can activate local or session storage by simply specifying two extra properties for jpPlot charts. Users can either enable local storage or session storage and the user can specify the time interval (in milliseconds) that the users want to keep the data in the storage. Only data that are newer than the specified time will be kept in the storage.\r\n\r\n```javascript \r\nbarChart .enableLocalStorage(true);  \r\nbarChart. storageTime(1000*5);\r\n```  \r\n\r\n##Writing your own visualization for Viskit\r\n\r\nSometimes the existing visualization   implementation may not be sufficient to your needs or may lack one or two features that you need. Let’s say you need a new type of chart that is not currently implemented in the current visualization libraries then it is possible to implement your own chat or any other form of visualization that you require. This guide will show how a new visualization can be added in to Viskit using [Raphael](http://raphaeljs.com/).\r\n\r\nRaphael is a highly customizable charting library that can be used to create any type of visualization using vector graphics. We will try to create a simple bar chart implementation for Viskit using Raphael for this guide.\r\n\r\n###Understanding Viskit charts\r\n\r\nBefore we start to write our own chart let's take a look at the structure of Viskit charts. Each and every chart extends from [Viskit.Chart](https://github.com/wso2/viskit/blob/master/js/subscriber/chart/Chart.js) class that defines the main functions and parameters of a chart. Any chart implementation overrides the necessary function from the functions that are defined in Viskit.Chart.\r\n\r\n###Your own bar chart with Raphaël\r\n\r\nLet’s start to create our Raphael bar chart implementation. We will create a simple bar chart to understand how to create your own chart implementation. To understand this guide having a general idea about Raphael will be helpful. You can take a look at the Raphael documentation [here](http://raphaeljs.com/reference.html)\r\n\r\n####Creating the constructor\r\nWe will first write a constructor for the chart that is similar to the constructor in Viskit.Chart. the constructor will be named \"Viskit.s.chart.raphael.BarChart\" according to the naming standards of Viskit. The constructor will call the super class constructor,  set default values to properties that are defined for this chart ( Since we did not define what the properties are we will add this later) and define any variables that will be needed by the chart implementation.\r\n\r\n```javascript\r\nViskit.s.chart.raphael.BarChart = function(canvas, chartTitle, chartDesc) {\r\n    Viskit.s.chart.Chart.call(this, canvas, chartTitle, chartDesc);\r\n   \r\n    this.colscheme(20)\t\t\r\n    this.chart = null\r\n    this.formattedDataArray = [];\r\n}\r\n```\r\n\r\n####Extending Viskit.Chart\r\nThe following code line should be added to the code to say that this chart extends from Viskit.Chart.\r\n\r\n```javascript\r\nViskit.extend(Viskit.s.chart.raphael.BarChart, Viskit.s.chart.Chart);\r\n``` \r\n####Defining chart properties\r\nNow we will define all the chart properties that we need for our bar chart implementation. We will only need a small number of properties because we are creating a rather simple bar chart. Any number of properties can be defined as needed.\r\n\r\n```javascript\r\nViskit.s.chart.raphael.BarChart.prototype\r\n    .property(\"dataField\")\r\n    .property(\"dataValue\")\r\n    .property(\"dataLabel\")\r\n    .property(\"barWidth\")\r\n    .property(\"barPadding\")\r\n    .property(\"fontFamily\")\r\n    .property(\"fontSize\")\r\n    .property(\"raphaelPaper\")\r\n    .property(\"marginSize\");\r\n```\r\n\r\nNow we shall add the lines to set defaults to the defined properties.  \r\n\r\n_Note: dataField, dataValue and dataLabel are not assigned with default values since these properties must be specified when creating a chart object._\r\n\r\n```javascript\r\nViskit.s.chart.raphael.BarChart = function(canvas, chartTitle, chartDesc) {\r\n    Viskit.s.chart.Chart.call(this, canvas, chartTitle, chartDesc);\r\n    \r\n    this.colscheme(20)\r\n        .width(500)\r\n        .height(300)\r\n        .barWidth(55)\r\n        .barPadding(35)\r\n        .fontFamily('Fontin-Sans, Arial')\r\n        .fontSize('10px')\r\n        .raphaelPaper(null)\r\n        .marginSize(20);\r\n\t\t\r\n    this.chart = null\r\n    this.formattedDataArray = [];\r\n}\r\n```\r\n\r\n####Creating a data converter (the important point)\r\nNow we will write a function to convert the received data into a form that we can use easily. We shall name this method \"convertData\". this method will convert the data into an array of JSON objects with two properties “label” and “value”.\r\n\r\n**label**\r\nThis will be used to label each bar of the chart. \"label\"” will keep the values specified by the \"dataLabel\" property.\r\n\r\n**value**\r\nThis property will be used to draw the chart this will specify the height of the chart. This will keep the value specified by the “dataValue” property.\r\n\r\nThe code for the data converter will be as follows.\r\n\r\n```javascript\r\nwso2vis.s.chart.raphael.BarChart.prototype.convertData = function (that) {\r\n    var df = that.traverseToDataField(that.data, that.dataField());    \r\n    var dcount = 1;\r\n    if (df instanceof Array) {\r\n        dcount = df.length;\r\n    };\r\n    \r\n    that.formattedData = [];\r\n    \r\n    for (var i = 0; i < dcount; i++) {\r\n        that.formattedData.push({\r\n            \"label\":getLbl(i),\r\n            \"value\":getVal(i)\r\n            });\r\n        that.formattedDataArray.push(getVal(i));\r\n    };\r\n    \r\n    function getVal(x) {\r\n        var r;\r\n        if (df instanceof Array) {\r\n            r = df[x];\r\n        }\r\n        else {\r\n            r = df;\r\n        }        \r\n        return parseInt(that.traverseToDataField(r, that.dataValue()));\r\n    };\r\n    \r\n    function getLbl(x) {\r\n        var r;\r\n        if (df instanceof Array) {\r\n            r = df[x];\r\n        }\r\n        else {\r\n            r = df;\r\n        }\r\n        return that.traverseToDataField(r, that.dataLabel());\r\n    };\r\n};\r\n```\r\n\r\n####The “load” function\r\nThis is the function that is called to actually create the chart. Here we will simply call the \"createBarChart\" method\r\n\r\n```javascript\r\nViskit.s.chart.raphael.BarChart.prototype.load = function () {\r\n    if (this.raphaelPaper() == null) {\r\n\t\tthis.createBarChart();\r\n\t}\r\n    return this;\r\n}\r\n```\r\n\r\n####The “update” function\r\nThis is the only method we will be overriding for this example as explained earlier we will write the code to draw when data is changed in this method\r\n\r\n```javascript\r\nViskit.s.chart.raphael.BarChart.prototype.update = function () {\r\n    this.formattedDataArray = [];\r\n    this.convertData(this);\r\n   \t\t\r\n    var r = this.raphaelPaper();\r\n    r.clear();\r\n    var ratio = (this.height()-(this.height()/10))/this.formattedDataArray.max();\r\n    var grid = r.drawGrid(this.marginSize(),0, this.width(), this.height()-this.marginSize(), 10, 10, \"#333\");\r\n    r.setYAxis(this.marginSize(),  this.height()-this.marginSize(), 10, 0, this.formattedDataArray.max(), r);\r\n\t\t\t   \r\n    for( var i = 0; i < this.formattedData.length;i++){\r\n        var bar = r.createBar( this.formattedData[i].value*ratio, i+1,this.formattedData[i].label,this,r);\r\n\t\t\r\n    }\r\n}\r\n```\r\nThis method will call the custom Raphael functions that we defined to draw the chart. Before drawing the chart the canvas will be cleared to make sure the new chart is not sketched on top of any previous charts.\r\n\r\nA complete code which was written for a Raphael pie chart can be fount at the [repository](https://github.com/wso2/viskit/blob/master/js/subscriber/chart/raphael/PieChart.js)\r\n\r\n###Adding the new chart into Viskit\r\n\r\nNow our bar chart is ready to be deployed into Viskit. To add a new implementation into Viskit you have to create a .js file that contains the code for the implementation place it in the appropriate place of the folder structure and do some minor changes into build files.\r\n\r\nWe will place the BarChart.js file in Viskit\\js\\subscriber\\chart\\raphael\r\n\r\nYou need to add this to the build script and build the library, so evrything will be packedup correctly. The build will also genarate you a Viskit.js minified version as well\r\n\r\n### Licence\r\nViskit is available under [Apache2.0](http://www.apache.org/licenses/LICENSE-2.0.html) licence.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Viskit.js","tagline":"The javascript charting library "}